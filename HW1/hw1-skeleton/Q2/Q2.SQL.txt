-- Setup. DO NOT REMOVE.
.headers on
.mode list
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]
	
	CREATE TABLE movies(id INTEGER PRIMARY KEY,name TEXT NOT NULL,score INTEGER NOT NULL);
	CREATE TABLE cast(movie_id INTEGER NOT NULL,cast_id INTEGER NOT NULL,cast_name TEXT NOT NULL);


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]

.separator ","
.import movie-name-score.txt movies
.import movie-cast.txt cast


-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]

	CREATE INDEX scores_index ON movies(score);
	CREATE INDEX cast_index ON cast(cast_id);
	CREATE INDEX movie_index ON movies(id);


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate average score

-- [insert your SQL statement(s) BELOW this line]

	SELECT AVG(score) AS avg_score FROM movies WHERE score >= 5;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find poor movies

-- [insert your SQL statement(s) BELOW this line]

	
	SELECT * FROM movies ORDER BY score,name ASC LIMIT 5;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find laid back actors

-- [insert your SQL statement(s) BELOW this line]

	SELECT cast_id,cast_name,COUNT(movie_id) AS movie_count FROM cast GROUP BY cast_id HAVING COUNT(movie_id) = 2 LIMIT 10;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]


	SELECT cast_id,cast_name,AVG(movies.score) AS average_score FROM cast INNER JOIN movies  ON movies.id = movie_id GROUP BY cast_id HAVING movies.score >= 40 AND COUNT(movie_id) > 2 ORDER BY AVG(movies.score) DESC, cast_name ASC LIMIT 10;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]

CREATE VIEW good_collaboration
AS
SELECT 
c1.cast_id AS cast_member_id1,
c2.cast_id AS cast_member_id2,
count(movies.id) AS movie_count,
avg(movies.score) AS average_movie_score
FROM
movies
INNER JOIN cast c1 ON c1.movie_id = id INNER JOIN cast c2 ON c1.movie_id = c2.movie_id AND c1.cast_id < c2.cast_id GROUP BY c1.cast_id,c2.cast_id HAVING COUNT(movies.id)>=3 and AVG(movies.score)>= 50;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]

	SELECT ca.cast_id,ca.cast_name, AVG(gc.average_movie_score) AS collaboration_score FROM good_collaboration AS gc INNER JOIN cast AS ca ON ca.cast_id = combine_id.id INNER JOIN
(SELECT cast_member_id1 AS id FROM good_collaboration GROUP BY cast_member_id1 UNION SELECT cast_member_id2 AS id FROM good_collaboration GROUP BY cast_member_id2) AS combine_id ON 
combine_id.id = gc.cast_member_id1 OR combine_id.id = gc.cast_member_id2 GROUP BY combine_id.id ORDER BY AVG(gc.average_movie_score) DESC, ca.cast_name ASC LIMIT 5;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]

	CREATE VIRTUAL TABLE movie_overview USING fts3(id, name, year, overview, popularity);
	.import movie-overview.txt movie_overview


-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]


SELECT COUNT(name) as count_overview FROM movie_overview WHERE overview MATCH 'fight';


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]


SELECT id FROM movie_overview WHERE overview MATCH "love  NEAR/5 story";

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --